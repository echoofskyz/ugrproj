> Mon May 15 07:18:37 2023
  created and tested time-stamper
  for project log
< Mon May 15 07:19:09 2023
> Mon May 15 18:29:16 2023
  work on docker container
  using: https://www.makeuseof.com/run-ubuntu-as-docker-container/
  --should make it so that I execute something to open docker-ubuntu shell
    where I use make to compile my stuff
< Mon May 15 19:11:31 2023
> Tue May 16 11:44:42 2023
  got docker container working as it should
  created Makefile
  created hello_world program to test Makefile
< Tue May 16 12:21:04 2023
> Wed May 17 08:10:51 2023
  started defining project structure
< Wed May 17 08:31:39 2023
> Thu May 18 08:39:52 2023
  copied a different project as a template
  set up glwf/linking for both win and linux
< Thu May 18 10:30:07 2023
> Fri May 19 06:39:41 2023
  created shader_man.c/h
  currently provides a function
    to compile shader programs from
    const char*-s that are vertex
    and fragment shaders
< Fri May 19 07:20:05 2023
> Fri May 19 08:43:21 2023
  moved gl/draw stuff to seperate
    start_page file
< Fri May 19 09:42:57 2023
> Sat May 20 10:37:46 2023
  wrote the first version of linked_list.h/c
  hopefully it works
  --should set up unit tests for it
  learned about void pointers
< Sat May 20 11:28:52 2023
> Sun May 21 08:08:32 2023
  started unit tests for linked_list
  lots of re writing
< Sun May 21 09:10:17 2023
> Mon May 22 08:23:18 2023
  added a bunch of test cases
  and fixed some defects
< Mon May 22 10:31:40 2023
> Tue May 23 08:51:37 2023
  finished writing unit tests for
    linked list and fixed all
    defects found
< Tue May 23 09:16:30 2023
> Tue May 23 19:30:20 2023
  added insert and empty methods to linked_list
    need to test
< Tue May 23 19:42:12 2023
> Tue May 23 19:55:39 2023
  decided to rewrite lists
    going to use doubly linked
    lists and include cursor, not going
    to store method pointers in list struct
    making a new singelton Lists or something
    to do things to lists
  got it to the point where it compiles
    haven't yet implemented most of the methods
    implementing different list managers for
    different datatypes that basically just
    wrap the one for void pointers
  learned that extern basically just makes the compiler
    look for when the variable is declared again
    and is defined somewhere else
< Tue May 23 21:43:15 2023
> Wed May 24 07:52:02 2023
  finishd initial implementation of VPLists
    got it to compile, not tested
    need to refactor unit tests to use VPLists
    and add tests for new methods
< Wed May 24 09:03:04 2023
> Thu May 25 07:40:54 2023
  refactored List tests
    to use/test VPLists
  --need to add tests for insert,
    cursor stuff, previous node checks
< Thu May 25 08:23:34 2023
> Thu May 25 10:51:17 2023
  added the rest of the tests for VPLists
< Thu May 25 11:06:15 2023
> Thu May 25 15:03:03 2023
  tried to design page elements, then Shaders
    planning on makeing a Renderer struct
    and Renderers to interface with them
    need to learn how to render text first
< Thu May 25 16:51:34 2023
> Thu May 25 19:08:08 2023
  wrote Renderer type and
    the skeleton of Renderers
    tried to figure out how to 
    render an ellipse in a frag shader
< Thu May 25 21:07:51 2023
> Fri May 26 13:19:32 2023
  got the new stuff to compile and
    continued to implement Renderers
< Fri May 26 15:23:14 2023
> Sat May 27 08:43:49 2023
  got triangle rendering to work
< Sat May 27 10:02:23 2023
> Sun May 28 12:10:15 2023
  set up draw line
< Sun May 28 13:05:40 2023
> Mon May 29 09:15:38 2023
  set up draw fill rect
< Mon May 29 09:31:25 2023
> Tue May 30 09:39:18 2023
  set up draw stroke rect
    and draw rect
< Tue May 30 09:52:42 2023
> Wed May 31 13:08:29 2023
  started to set up draw/render fill circle
< Wed May 31 13:21:51 2023
> Thu Jun  1 20:11:00 2023
  continued to implement draw fill circle
< Thu Jun  1 20:25:19 2023
> Sat Jun  3 11:56:32 2023
  continued to implement render fill circle
< Sat Jun  3 12:07:25 2023
> Wed Jun  7 14:56:56 2023
  started to write circle frag shader
< Wed Jun  7 15:00:47 2023
> Tue Jun 13 19:16:33 2023
  got the project to compile (needs testing,
    frag shader just solid color)
< Tue Jun 13 19:35:55 2023
> Thu Jul 20 08:34:26 2023
  added renderFillCircles to draw loop
  fixed ShaderUtils error message (was saying 
    vert shader in frag shader err msg)
  changed circle shaders bc vec5 does not exist
  :runs without error, next write circle frag
    shader
  -need to decide how I want to fix aspect ratio
< Thu Jul 20 09:36:29 2023
> Fri Jul 21 12:49:07 2023
  wrote the start of the circle frag shader
  added resolution uniform to circle render
  added width/height property to renderer
  added width/height update to resize callback
  :got a circle to render
  -need to make all circles render
  -will probably fix the aspect ratio maybe 4x3?
< Fri Jul 21 14:05:39 2023
> Sat Jul 22 12:17:29 2023
  circles with different positions works just fine
  enabled blending
  -temporarily removed depth testing to make transparency
    work properly
  :need to re-enable depth testing and render the circles
    seperatly in order of depth so transparency works correctly
< Sat Jul 22 13:02:38 2023
> Mon Jul 24 07:27:13 2023
  rearranged circle rendering to render one at a time
  determined that I should get rid of z coord based
    rendering and do normal 2d order based overlap
  :need to remove z coord from shape objects
  :need to redo rendering functions to render
    objects as they are drawn instead of after
< Mon Jul 24 08:11:31 2023
> Wed Jul 26 17:17:43 2023
  made the project be a git repo
  removed the z coord from everything
  made draw functions render immediately
  changed triangle rendering color passthrough
    to use a uniform instead of a vertex attribute
  got everything to run correctly again
< Wed Jul 26 19:24:21 2023
> Thu Jul 27 17:28:14 2023
  changed the way I get colors into the
    triangle shader to a unifrom instead of
    attribute pointers
  -figured out that the issue where circle 
    rendering wouldn't work was somehow caused
    by seting up the uniform before setting
    the shader to use, no idea why, just followed
    the instructions on khronos' site about
    common errors
    (fixed this)
  changed circle rendering to use uniforms
    instead of vert attrib pointers
< Thu Jul 27 18:01:47 2023
> Mon Jul 31 07:19:27 2023
  updated sizes of vertex arrays
  added .PHONY to makefile
  made source files listing a variable in makefile
  fixed line render
    - radius was replaced by red in the vertex buffer
      initialization at one point
  added linecaps to lines
  made circle render harndess work
  : need to soften lines
  : need to figure out how I want text rendering to
    be structured
  : need to make points for all letters
< Mon Jul 31 07:53:56 2023
> Tue Aug  1 08:29:32 2023
  plotted out capital letters on graph paper
    for vector based text rendering
< Tue Aug  1 08:58:52 2023
> Sat Aug  5 06:43:39 2023
  added text function to renderers.h/.c
  added cases for abcd and \n
< Sat Aug  5 07:49:30 2023
> Sun Aug  6 09:41:10 2023
  added cases for efghijklmnopq
< Sun Aug  6 10:03:45 2023
> Mon Aug  7 08:17:49 2023
  added cases for rstuvwxyz12345
< Mon Aug  7 08:45:20 2023
> Tue Aug  8 22:23:47 2023
  added 67890, ' ' and attempted to add
    null (partialy full array)
  need to finish getting null to work
  then make lines nicer
< Tue Aug  8 22:52:06 2023
> Wed Aug  9 08:31:32 2023
  removed null case, the text length parameter
    just must be set to the length of the char
    array input or i'll end up reading something
    else, not uninitialized array space
  made lines soft, need to find a better way
    to handle stroke weight and line hardness
  had to first do algebra to get two equations
    for closest x and closest y (from uv to line)
    then had to copy and edit circle shader to work
    then had to debug
    one big issue was that I had my slope backwards
    another was that I somehow got my equations
      for closest x and closest y backwards???
    then I made sure that I could find a line hardness
      and line box width pair that made text look ok
  todo: circle rendering to not use renderCircle, just
    circle, and renderTriangle to just be triangle
< Wed Aug  9 12:08:24 2023
> Tue Aug 22 14:18:37 2023
  moved page_start.c.old to old dir
  made the window aspect ratio static
  tested rendering smaller text, calibrated text rendering
    to work properly for small text
  moved GUIelement workspace to old
  added mouse position callback
  restyled '{}'s in main
  added mouse button press callback
< Tue Aug 22 15:23:05 2023
> Wed Aug 23 11:24:05 2023
  added Page type
  added currentPage to globalish state
  added delete node to vpLists and didn't test it
  set up mouse handeling on start page
  started to popuate start page
  changed default strokeWeight
  moved some includes in .c files to .h files
  added some include guards
  started to restyle things
  tested it and it compiles!
< Wed Aug 23 14:05:45 2023
> Thu Nov  9 16:19:17 2023
  made the DFA button work only when clicked
  moved the declaration for Page type to AppData header
  changed code to pass AppData to page click/render
  DFA button now works!!!!!!?!!!!
< Thu Nov  9 16:58:35 2023
> Fri Nov 10 15:18:30 2023
  imported List/VPLists to dfaPage
  assigned char pointer index to derefrence of char pointer pointer
  hurt myself trying to cast pointers
  tried to set up DFA test sequence variable
  todo: make CharLists
  add on terminate function to Page
  ? do I want to have all page data be saved to appdata?
< Fri Nov 10 16:00:09 2023
> Sat Nov 11 14:35:28 2023
  created CharLists, basically a bunch of wrapper
    functions for VPLists that allow for storing chars
  -still need to add on terminate function to Page, CharList needs
    to be free'd
< Sat Nov 11 15:04:26 2023
> Sun Nov 12 15:18:39 2023
  added Page.free()
< Sun Nov 12 15:26:14 2023
> Mon Nov 13 14:58:36 2023
  worked on layout for dfaPage
< Mon Nov 13 15:23:12 2023
> Mon Nov 20 15:40:28 2023
  added keyboard handler for pages
    and made test seq box interactive
  -weird graphical bug on my laptop
    DFA button text stays
< Mon Nov 20 16:01:50 2023
> Sun Nov 26 18:51:59 2023
  moved draw test seq box to its own function
  added DFANodeLists and DFATypes and DFALinkLists
  added create node on click, doesn't allow nodes to be too close
  started building menu buttons
  -going to have link transitions be shown on the top if going from left
    to right, and on bottom if going from right to left, just have them be
    drawn right above/below midpoint of line, line gets half arrows on ends
    to indicate direction
  -have to add garbage collection for DFANodeLists
  -have to figure out how to handle state for entering text into the
    test seq bar vs entering text into a node link
< Sun Nov 26 20:54:19 2023
  -need to check on dist function/click detection, its not working right
> Mon Nov 27 09:30:27 2023
  fixed the dist function issue, was using button diameter instead of rad
  worked on node link mode, got the nodes to link
  - still need to put in directional arrow, and
    do the whole text box/transitions thing
< Mon Nov 27 10:11:48 2023
> Mon Nov 27 10:33:20 2023
  got node link editing to work
  -need to work on rendering link text
< Mon Nov 27 11:29:18 2023
> Mon Nov 27 13:01:06 2023
  spent a long while fixing a crashing issue
  - seems to be caused by not initializing the
    char lists in links
  have line text working
  hopefully fixed a crash by resetting selectedLink when
    not in WRITELINK, was crashing when you tried to "chain"
    links
  added a link direction indicator
< Mon Nov 27 14:17:47 2023
> Mon Nov 27 15:51:10 2023
  added set start mode
  -still getting unknown crash in node linking mode
  added set ends mode
  -getting another crash, the wrong node was toggled
    just before, list issue?
    definitly list issue, nodes appear to be popped from
    the list instead of deleted?
    clicking again after end node was removed from list
    causes the crash
  -should fix the list at some point, but also should just
    have "end node" be a property of a node
  changed "end nodes" to be property of a node,
  this was easier, simpler, faster (to code), faster (to run),
    better, made more sense, less crashy, less janky, took less space
    in the code, and in memory at run time, ....
  !I now have all of the state I need! ... probably ... hopefully .. maybe.
< Mon Nov 27 16:30:09 2023
> Mon Nov 27 18:20:08 2023
  now draw selected node when linking
< Mon Nov 27 18:24:13 2023
